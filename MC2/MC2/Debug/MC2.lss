
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b13  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000770  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069f  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ce  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007b4  00000000  00000000  000022ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000UL
#include "util/delay.h"


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	// The purpose of this variable is to store the received data from SPI
	u8_t recievedByteSPI =0;
  76:	19 82       	std	Y+1, r1	; 0x01

	//Configuring SPI pins
	mdio_setPinStatus(PORTB,PIN4,INPUT_FLOAT);
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	60 e1       	ldi	r22, 0x10	; 16
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	0e 94 8b 00 	call	0x116	; 0x116 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN5,INPUT_FLOAT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	60 e2       	ldi	r22, 0x20	; 32
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 8b 00 	call	0x116	; 0x116 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN6,OUTPUT);
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	60 e4       	ldi	r22, 0x40	; 64
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 8b 00 	call	0x116	; 0x116 <mdio_setPinStatus>
	mdio_setPinStatus(PORTB,PIN7,INPUT_FLOAT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	60 e8       	ldi	r22, 0x80	; 128
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 8b 00 	call	0x116	; 0x116 <mdio_setPinStatus>
	
	//Setting actuators pins as output
	mdio_setPinStatus(PORTC,PIN2,OUTPUT);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 8b 00 	call	0x116	; 0x116 <mdio_setPinStatus>
	mdio_setPinStatus(PORTD,PIN3,OUTPUT);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	68 e0       	ldi	r22, 0x08	; 8
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 8b 00 	call	0x116	; 0x116 <mdio_setPinStatus>
	
	//Initializing SPI
	mspi_init(MSPI_SLAVE_DEVICE,MSPI_MSB_FIRST,MSPI_SAMPLE_R_SETUP_F,MSPI_CLK_PRE_64);
  b4:	25 e0       	ldi	r18, 0x05	; 5
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 34 01 	call	0x268	; 0x268 <mspi_init>
	
    while (1) 
    {
		//receiving the data from the master(MCU1)
		mspi_slaveSendRecv(0,&recievedByteSPI);
  c0:	be 01       	movw	r22, r28
  c2:	6f 5f       	subi	r22, 0xFF	; 255
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 4a 01 	call	0x294	; 0x294 <mspi_slaveSendRecv>
		//Switching over the received data
		switch (recievedByteSPI)
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	81 36       	cpi	r24, 0x61	; 97
  d0:	19 f0       	breq	.+6      	; 0xd8 <main+0x6c>
  d2:	82 36       	cpi	r24, 0x62	; 98
  d4:	61 f0       	breq	.+24     	; 0xee <main+0x82>
  d6:	15 c0       	rjmp	.+42     	; 0x102 <main+0x96>
		{
			case 'a':
				mdio_setPinValue(PORTC,PIN2,HIGH);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	64 e0       	ldi	r22, 0x04	; 4
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mdio_setPinValue>
				mdio_setPinValue(PORTD,PIN3,LOW);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	68 e0       	ldi	r22, 0x08	; 8
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mdio_setPinValue>
				break;
  ec:	0a c0       	rjmp	.+20     	; 0x102 <main+0x96>
			case 'b':
				mdio_setPinValue(PORTC,PIN2,LOW);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	64 e0       	ldi	r22, 0x04	; 4
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mdio_setPinValue>
				mdio_setPinValue(PORTD,PIN3,HIGH);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	68 e0       	ldi	r22, 0x08	; 8
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mdio_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	80 e7       	ldi	r24, 0x70	; 112
 106:	92 e0       	ldi	r25, 0x02	; 2
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x9c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
 114:	d5 cf       	rjmp	.-86     	; 0xc0 <main+0x54>

00000116 <mdio_setPinStatus>:
/************************************************************************/

void mdio_setPinStatus(u8_t au8_port, u8_t au8_pin, u8_t au8_status)
{
	/*Switching over GPIO Ports*/
	switch(au8_port)
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	f9 f0       	breq	.+62     	; 0x158 <mdio_setPinStatus+0x42>
 11a:	30 f0       	brcs	.+12     	; 0x128 <mdio_setPinStatus+0x12>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	a1 f1       	breq	.+104    	; 0x188 <mdio_setPinStatus+0x72>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	09 f4       	brne	.+2      	; 0x126 <mdio_setPinStatus+0x10>
 124:	49 c0       	rjmp	.+146    	; 0x1b8 <mdio_setPinStatus+0xa2>
 126:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			
			/*Switching over pin status*/
			switch(au8_status)
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	41 f0       	breq	.+16     	; 0x13c <mdio_setPinStatus+0x26>
 12c:	18 f0       	brcs	.+6      	; 0x134 <mdio_setPinStatus+0x1e>
 12e:	42 30       	cpi	r20, 0x02	; 2
 130:	51 f0       	breq	.+20     	; 0x146 <mdio_setPinStatus+0x30>
 132:	08 95       	ret
			{
				/*In case of OUTPUT*/
				case OUTPUT:
					
					/*Set the specified pins to 1 in DDR*/
					MDIO_DDRA |= au8_pin;
 134:	8a b3       	in	r24, 0x1a	; 26
 136:	68 2b       	or	r22, r24
 138:	6a bb       	out	0x1a, r22	; 26
					
					/*Break from this case*/
					break;
 13a:	08 95       	ret
				
				/*In case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRA &= ~au8_pin;
 13c:	8a b3       	in	r24, 0x1a	; 26
 13e:	60 95       	com	r22
 140:	68 23       	and	r22, r24
 142:	6a bb       	out	0x1a, r22	; 26
										
					/*Break from this case*/
					break;
 144:	08 95       	ret

				/*In case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRA &= ~au8_pin;
 146:	8a b3       	in	r24, 0x1a	; 26
 148:	96 2f       	mov	r25, r22
 14a:	90 95       	com	r25
 14c:	89 23       	and	r24, r25
 14e:	8a bb       	out	0x1a, r24	; 26

					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTA |= au8_pin;
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	68 2b       	or	r22, r24
 154:	6b bb       	out	0x1b, r22	; 27
					
					/*Break from this case*/
					break;
 156:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
			
			/*Switching over pin status*/
			switch(au8_status)
 158:	41 30       	cpi	r20, 0x01	; 1
 15a:	41 f0       	breq	.+16     	; 0x16c <mdio_setPinStatus+0x56>
 15c:	18 f0       	brcs	.+6      	; 0x164 <mdio_setPinStatus+0x4e>
 15e:	42 30       	cpi	r20, 0x02	; 2
 160:	51 f0       	breq	.+20     	; 0x176 <mdio_setPinStatus+0x60>
 162:	08 95       	ret
			{
				/*In case of OUTPUT*/
				case OUTPUT:
					
					/*Set the specified pins to 1 in DDR*/
					MDIO_DDRB |= au8_pin;
 164:	87 b3       	in	r24, 0x17	; 23
 166:	68 2b       	or	r22, r24
 168:	67 bb       	out	0x17, r22	; 23
					
					/*Break from this case*/
					break;
 16a:	08 95       	ret
				
				/*In case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRB &= ~au8_pin;
 16c:	87 b3       	in	r24, 0x17	; 23
 16e:	60 95       	com	r22
 170:	68 23       	and	r22, r24
 172:	67 bb       	out	0x17, r22	; 23
										
					/*Break from this case*/
					break;
 174:	08 95       	ret

				/*In case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRB &= ~au8_pin;
 176:	87 b3       	in	r24, 0x17	; 23
 178:	96 2f       	mov	r25, r22
 17a:	90 95       	com	r25
 17c:	89 23       	and	r24, r25
 17e:	87 bb       	out	0x17, r24	; 23

					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTB |= au8_pin;
 180:	88 b3       	in	r24, 0x18	; 24
 182:	68 2b       	or	r22, r24
 184:	68 bb       	out	0x18, r22	; 24
					
					/*Break from this case*/
					break;
 186:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
			
			/*Switching over pin status*/
			switch(au8_status)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	41 f0       	breq	.+16     	; 0x19c <mdio_setPinStatus+0x86>
 18c:	18 f0       	brcs	.+6      	; 0x194 <mdio_setPinStatus+0x7e>
 18e:	42 30       	cpi	r20, 0x02	; 2
 190:	51 f0       	breq	.+20     	; 0x1a6 <mdio_setPinStatus+0x90>
 192:	08 95       	ret
			{
				/*In case of OUTPUT*/
				case OUTPUT:
					
					/*Set the specified pins to 1 in DDR*/
					MDIO_DDRC |= au8_pin;
 194:	84 b3       	in	r24, 0x14	; 20
 196:	68 2b       	or	r22, r24
 198:	64 bb       	out	0x14, r22	; 20
					
					/*Break from this case*/
					break;
 19a:	08 95       	ret
				
				/*In case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRC &= ~au8_pin;
 19c:	84 b3       	in	r24, 0x14	; 20
 19e:	60 95       	com	r22
 1a0:	68 23       	and	r22, r24
 1a2:	64 bb       	out	0x14, r22	; 20
										
					/*Break from this case*/
					break;
 1a4:	08 95       	ret

				/*In case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRC &= ~au8_pin;
 1a6:	84 b3       	in	r24, 0x14	; 20
 1a8:	96 2f       	mov	r25, r22
 1aa:	90 95       	com	r25
 1ac:	89 23       	and	r24, r25
 1ae:	84 bb       	out	0x14, r24	; 20

					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTC |= au8_pin;
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	68 2b       	or	r22, r24
 1b4:	65 bb       	out	0x15, r22	; 21
					
					/*Break from this case*/
					break;
 1b6:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
			
			/*Switching over pin status*/
			switch(au8_status)
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	41 f0       	breq	.+16     	; 0x1cc <mdio_setPinStatus+0xb6>
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <mdio_setPinStatus+0xae>
 1be:	42 30       	cpi	r20, 0x02	; 2
 1c0:	51 f0       	breq	.+20     	; 0x1d6 <mdio_setPinStatus+0xc0>
 1c2:	08 95       	ret
			{
				/*In case of OUTPUT*/
				case OUTPUT:
					
					/*Set the specified pins to 1 in DDR*/
					MDIO_DDRD |= au8_pin;
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	68 2b       	or	r22, r24
 1c8:	61 bb       	out	0x11, r22	; 17
					
					/*Break from this case*/
					break;
 1ca:	08 95       	ret
				
				/*In case of INPUT_FLOAT*/
				case INPUT_FLOAT:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRD &= ~au8_pin;
 1cc:	81 b3       	in	r24, 0x11	; 17
 1ce:	60 95       	com	r22
 1d0:	68 23       	and	r22, r24
 1d2:	61 bb       	out	0x11, r22	; 17
										
					/*Break from this case*/
					break;
 1d4:	08 95       	ret

				/*In case of INPUT_PULLUP*/
				case INPUT_PULLUP:
					
					/*Set the specified pins to 0 in DDR*/
					MDIO_DDRD &= ~au8_pin;
 1d6:	81 b3       	in	r24, 0x11	; 17
 1d8:	96 2f       	mov	r25, r22
 1da:	90 95       	com	r25
 1dc:	89 23       	and	r24, r25
 1de:	81 bb       	out	0x11, r24	; 17

					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTD |= au8_pin;
 1e0:	82 b3       	in	r24, 0x12	; 18
 1e2:	68 2b       	or	r22, r24
 1e4:	62 bb       	out	0x12, r22	; 18
 1e6:	08 95       	ret

000001e8 <mdio_setPinValue>:
}

void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_value)
{
	/*Switching over GPIO Ports*/
	switch(au8_port)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	a1 f0       	breq	.+40     	; 0x214 <mdio_setPinValue+0x2c>
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <mdio_setPinValue+0x10>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	f9 f0       	breq	.+62     	; 0x230 <mdio_setPinValue+0x48>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	59 f1       	breq	.+86     	; 0x24c <mdio_setPinValue+0x64>
 1f6:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			
			/*Switching over pin values*/
			switch(au8_value)
 1f8:	44 23       	and	r20, r20
 1fa:	19 f0       	breq	.+6      	; 0x202 <mdio_setPinValue+0x1a>
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	31 f0       	breq	.+12     	; 0x20c <mdio_setPinValue+0x24>
 200:	08 95       	ret
			{
				/*In case of LOW*/
				case LOW:
					
					/*Set the specified pins to 0 in PORT*/
					MDIO_PORTA &= ~au8_pin;
 202:	8b b3       	in	r24, 0x1b	; 27
 204:	60 95       	com	r22
 206:	68 23       	and	r22, r24
 208:	6b bb       	out	0x1b, r22	; 27
					
					/*Break from this case*/
					break;
 20a:	08 95       	ret
				
				/*In case of HIGH*/
				case HIGH:
					
					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTA |= au8_pin;
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	68 2b       	or	r22, r24
 210:	6b bb       	out	0x1b, r22	; 27
										
					/*Break from this case*/
					break;
 212:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
			
			/*Switching over pin values*/
			switch(au8_value)
 214:	44 23       	and	r20, r20
 216:	19 f0       	breq	.+6      	; 0x21e <mdio_setPinValue+0x36>
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	31 f0       	breq	.+12     	; 0x228 <mdio_setPinValue+0x40>
 21c:	08 95       	ret
			{
				/*In case of LOW*/
				case LOW:
					
					/*Set the specified pins to 0 in PORT*/
					MDIO_PORTB &= ~au8_pin;
 21e:	88 b3       	in	r24, 0x18	; 24
 220:	60 95       	com	r22
 222:	68 23       	and	r22, r24
 224:	68 bb       	out	0x18, r22	; 24
					
					/*Break from this case*/
					break;
 226:	08 95       	ret
				
				/*In case of HIGH*/
				case HIGH:
					
					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTB |= au8_pin;
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	68 2b       	or	r22, r24
 22c:	68 bb       	out	0x18, r22	; 24
										
					/*Break from this case*/
					break;
 22e:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
			
			/*Switching over pin values*/
			switch(au8_value)
 230:	44 23       	and	r20, r20
 232:	19 f0       	breq	.+6      	; 0x23a <mdio_setPinValue+0x52>
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	31 f0       	breq	.+12     	; 0x244 <mdio_setPinValue+0x5c>
 238:	08 95       	ret
			{
				/*In case of LOW*/
				case LOW:
					
					/*Set the specified pins to 0 in PORT*/
					MDIO_PORTC &= ~au8_pin;
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	60 95       	com	r22
 23e:	68 23       	and	r22, r24
 240:	65 bb       	out	0x15, r22	; 21
					
					/*Break from this case*/
					break;
 242:	08 95       	ret
				
				/*In case of HIGH*/
				case HIGH:
					
					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTC |= au8_pin;
 244:	85 b3       	in	r24, 0x15	; 21
 246:	68 2b       	or	r22, r24
 248:	65 bb       	out	0x15, r22	; 21
										
					/*Break from this case*/
					break;
 24a:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
			
			/*Switching over pin values*/
			switch(au8_value)
 24c:	44 23       	and	r20, r20
 24e:	19 f0       	breq	.+6      	; 0x256 <mdio_setPinValue+0x6e>
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	31 f0       	breq	.+12     	; 0x260 <mdio_setPinValue+0x78>
 254:	08 95       	ret
			{
				/*In case of LOW*/
				case LOW:
					
					/*Set the specified pins to 0 in PORT*/
					MDIO_PORTD &= ~au8_pin;
 256:	82 b3       	in	r24, 0x12	; 18
 258:	60 95       	com	r22
 25a:	68 23       	and	r22, r24
 25c:	62 bb       	out	0x12, r22	; 18
					
					/*Break from this case*/
					break;
 25e:	08 95       	ret
				
				/*In case of HIGH*/
				case HIGH:
					
					/*Set the specified pins to 1 in PORT*/
					MDIO_PORTD |= au8_pin;
 260:	82 b3       	in	r24, 0x12	; 18
 262:	68 2b       	or	r22, r24
 264:	62 bb       	out	0x12, r22	; 18
 266:	08 95       	ret

00000268 <mspi_init>:
        /*Wait for 1 microsecond*/
        _delay_us(1);
    }
    
    /*Get the received data from slave*/
    *au8_recvData = MSPI_SPDR;
 268:	1d b8       	out	0x0d, r1	; 13
 26a:	20 fd       	sbrc	r18, 0
 26c:	04 c0       	rjmp	.+8      	; 0x276 <mspi_init+0xe>
 26e:	9e b1       	in	r25, 0x0e	; 14
 270:	91 60       	ori	r25, 0x01	; 1
 272:	9e b9       	out	0x0e, r25	; 14
 274:	03 c0       	rjmp	.+6      	; 0x27c <mspi_init+0x14>
 276:	9e b1       	in	r25, 0x0e	; 14
 278:	9e 7f       	andi	r25, 0xFE	; 254
 27a:	9e b9       	out	0x0e, r25	; 14
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	68 2b       	or	r22, r24
 288:	46 2b       	or	r20, r22
 28a:	26 95       	lsr	r18
 28c:	24 2b       	or	r18, r20
 28e:	20 64       	ori	r18, 0x40	; 64
 290:	2d b9       	out	0x0d, r18	; 13
 292:	08 95       	ret

00000294 <mspi_slaveSendRecv>:
}

void mspi_slaveSendRecv(u8_t au8_sendData, u8_t* au8_recvData)
{   
    /*Checking if the SPI flag rises*/
    if( GET_BIT(MSPI_SPSR, 7) )
 294:	77 9b       	sbis	0x0e, 7	; 14
 296:	04 c0       	rjmp	.+8      	; 0x2a0 <mspi_slaveSendRecv+0xc>
    {
        /*Get the received master data*/
        *au8_recvData = MSPI_SPDR;
 298:	9f b1       	in	r25, 0x0f	; 15
 29a:	fb 01       	movw	r30, r22
 29c:	90 83       	st	Z, r25

        /*Set the new data*/
        MSPI_SPDR = au8_sendData;
 29e:	8f b9       	out	0x0f, r24	; 15
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
